Section 1
----------
- general overview, nothing to see here

Section 2:
----------
part 5

had to install node & yarn

Didn't install node manually from site as I had it previously installed from homebrew.

For yarn I did a "brew install yarn" rather than through npm


Section 3:
----------
Did install live-server via yarn, and it worked fine.

Lec 8:

JSX -- JavaScript XML - language extension to JavaScript (akin to SASS/LESS for CSS)

Babel -- tool for translating JSX to JavaScript

Ran into an issue, when copying the babel output to app.js, reloading the page resulted in a "react-dom.js:17859 Uncaught Error: _registerComponent(...): Target container is not a DOM element." error in Chrome dev tools.  I was not able to resolve this issue.

Lec 9:
Setting up babel:

installed babel via yarn:

yarn global v1.1.0

Did an init to generate package.json

yarn init

Installed some presets for the project:

yarn add babel-preset-react@6.24.1
yarn add babel-preset-env@1.5.2

Compiling the app.js:

babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

--watch keeps babel running to monitor the file for changes.  If you leave this out, then it just does a single pass compile.

Lec 10:

JSX expressions must have a single root element.  This makes sense, as it essentially converts the JSX into a AST.

Lec 11:

JavaScript expressions can be embedded in JSX within {} blocks (ie: "<h1>My name is {userName}</h1>" would emit the value of userName into the element)

Lec 12:

If a JSX expression evaluates to undefined it is not rendered.  This can be taken advantage of to do conditional rendering.

Lec 16:

Attribute "class" on a dom element has been renamed to "className" in JSX. Others: https://reactjs.org/docs/dom-elements.html

Interesting: looks like this is no longer the case in React 16 which was released just a couple days ago.

Lec 17:

JSX has no built in data binding
Leads to discussion of virtual dom.

Lec 24:

ES6 template strings:
`Hi, I am ${this.name}`;


Lec 25

React Components!

Components are just ES6 classes that extend React.Component
Must supply a render() method which just returns JSX
Components must start with uppercase first letter, this is how React differentiates between components and HTML tags in JSX 